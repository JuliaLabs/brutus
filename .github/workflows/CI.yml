name: Brutus CI

on: [push, pull_request]

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04]
        julia-commit: [b55dc7a83983d03aabb032c6ff5f01aa0ea021f8]
        llvm-commit: [e252293d0629066225228596a9ef9d397513eb99]

    env:
      CCACHE_DIR: ${GITHUB_WORKSPACE}/.ccache
      CCACHE_COMPRESS: true
      CCACHE_COMPRESSLEVEL: 6
      CCACHE_MAXSIZE: 400M

      USE_BINARYBUILDER_LLVM: 0
      LLVM_VER: svn
      LLVM_DEBUG: 0
      LLVM_GIT_VER: ${{ matrix.llvm-commit }}
      JULIA_CPU_TARGET: "generic;sandybridge,-xsaveopt,clone_all;haswell,-rdrnd,base(1)"

    steps:
      # must checkout Brutus first, lest everything in ${GITHUB_WORKSPACE} be
      # deleted when we finally do check it out
      - name: Checkout Brutus
        uses: actions/checkout@master
        with:
          submodules: 'true'

      - name: Cache Julia
        id: cache-julia
        uses: actions/cache@v1
        with:
          path: julia/usr
          key: ${{ matrix.os }}-julia-${{ matrix.julia-commit }}-${{ matrix.llvm-commit }}

      # needed because they're just symlinks in usr/share
      # long term, we will probably want to cache an installed Julia
      - name: Cache stdlibs
        uses: actions/cache@v1
        with:
          path: julia/stdlib
          key: ${{ matrix.os }}-stdlibs-${{ matrix.julia-commit }}-${{ matrix.llvm-commit }}

      - name: Install build dependencies for Julia
        if: steps.cache-julia.outputs.cache-hit != 'true'
        run: sudo apt-get install gfortran

      - name: Checkout Julia
        uses: actions/checkout@v2
        if: steps.cache-julia.outputs.cache-hit != 'true'
        with:
          repository: JuliaLang/julia
          ref: ${{ matrix.julia-commit }}
          path: julia

      - name: Build Julia
        if: steps.cache-julia.outputs.cache-hit != 'true'
        run: |
          cd julia
          make -j `nproc`

      - name: Check Julia version
        run: ${GITHUB_WORKSPACE}/julia/usr/bin/julia -e "using InteractiveUtils; versioninfo()"

      - name: Install build tools
        run: sudo apt-get install ccache

      - name: Prepare timestamp for ccache cache
        id: ccache-cache-timestamp
        run: echo "::set-output name=timestamp::`date -u +%Y%m%d-%H%M%S`"

      - name: Cache ccache files
        uses: actions/cache@v1
        with:
          path: .ccache
          key: ${{ matrix.os }}-ccache-${{ steps.ccache-cache-timestamp.outputs.timestamp }}
          restore-keys: ${{ matrix.os }}-ccache-

      - name: Configure build
        run: |
          cmake -S llvm-project/llvm -B build \
                -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
                -DLLVM_ENABLE_PROJECTS="mlir" -DLLVM_TARGETS_TO_BUILD="host;NVPTX" \
                -DLLVM_EXTERNAL_PROJECTS="brutus" -DLLVM_EXTERNAL_BRUTUS_SOURCE_DIR="." \
                -DCMAKE_BUILD_TYPE=Release -DJulia_EXECUTABLE="${GITHUB_WORKSPACE}/julia/usr/bin/julia"

      - name: Build library
        run: cmake --build build --target brutus --parallel `nproc`

      - name: Precompile library
        run: |
          export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${GITHUB_WORKSPACE}/build/lib
          ${GITHUB_WORKSPACE}/julia/usr/bin/julia --project=Brutus -e 'using Pkg; pkg"instantiate"; pkg"precompile"'

      - name: Test Brutus
        run: cmake --build build --target check-brutus --parallel `nproc`
